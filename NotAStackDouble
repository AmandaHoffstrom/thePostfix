package ass1submission;

public class NotAStackDouble {
	/**
	 * This class is created for double values, which are used in the 2d task - evaluation of the postfix expression.
	 * It describes the exception cases, which can happen if person is inputing or popping too many values. 
	 * We thought that it would be nice to give more guidelines to the person who is about to input the values. 
	 * It is the additional class which makes the program to look nicer. This class has two exceptions.
	 *  @author Amanda HoffstrÃ¶m & Ekaterina Legoido
	 */

		double[] values;                              // Declare array of type double  
		int counter;
		int pointer;
		int size;
		
		public NotAStackDouble(int sizei){            // Public constructor of the NotAStackDouble class with int parameter declared as sizei
			values = new double[sizei];               // Allocates memory for sizei 
			counter = 0;
			pointer = sizei;
			size = sizei;                             // Give int size of sizei 
		}
		                                         
		public void push(double d) throws Exception{  //Throwing exception explicitly
			                                          // If "if" statement is true, it "throws" the exception and prints the phrase, 
			                                          // if not, it is implementing the "else" statement
			if(counter >= size){                      
				throw new Exception("It's not a student pub, you can't put more values into this");
			}
			else{
				values[pointer-1] = d;
				pointer--;
				counter++;
			}
		}
		
		public double pop() throws Exception{          // Throwing exception explicitly
			                                           // If "if" statement is true, it "throws" the exception and prints the phrase,
			                                           // If not, it implementing the "else" statements and returns the values
			if(counter < 0){
				throw new Exception("It's not your credit card, there are no values to pop more");
			}
			else{
				counter--;
				pointer++;
				return values[pointer-1];
			}
			
		}
		
		public boolean isEmpty(){ 
			return counter == 0;
		}
		

}
